<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnnualIncrease" xml:space="preserve">
    <value>Annual Increase</value>
  </data>
  <data name="AnswerFirstPart" xml:space="preserve">
    <value>If you want to spend</value>
  </data>
  <data name="AnswerInfinity" xml:space="preserve">
    <value>You will not achieve Financial Freedom Point at the desired age</value>
  </data>
  <data name="AnswerLastPart" xml:space="preserve">
    <value>at the first month of stage</value>
  </data>
  <data name="AnswerMinusInfinity" xml:space="preserve">
    <value>You will achieve Financial Freedom Point at age</value>
  </data>
  <data name="AnswerSecondPart" xml:space="preserve">
    <value>each month after the age of </value>
  </data>
  <data name="AnswerThirdPart" xml:space="preserve">
    <value>, you will need to save </value>
  </data>
  <data name="BankInput" xml:space="preserve">
    <value>Bank Asset (VND)</value>
  </data>
  <data name="ButtonCalculate" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="ButtonExpand" xml:space="preserve">
    <value>Expand</value>
  </data>
  <data name="ButtonSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="CurrentAge" xml:space="preserve">
    <value>Current Age</value>
  </data>
  <data name="ErrorCurrentAge1" xml:space="preserve">
    <value>Current Age should be at least 1</value>
  </data>
  <data name="ErrorCurrentAge2" xml:space="preserve">
    <value>Current Age should not exceed 100</value>
  </data>
  <data name="ErrorFFPAge1" xml:space="preserve">
    <value>FFP Age should be at least 1</value>
  </data>
  <data name="ErrorFFPAge2" xml:space="preserve">
    <value>FFP Age should not exceed 100</value>
  </data>
  <data name="ErrorSpending" xml:space="preserve">
    <value>Expected Spending should not be negative</value>
  </data>
  <data name="FFPAge" xml:space="preserve">
    <value>Financial Freedom Point (FFP) Age </value>
  </data>
  <data name="FromAge" xml:space="preserve">
    <value>From Age</value>
  </data>
  <data name="Inflation" xml:space="preserve">
    <value>Inflation (%)</value>
  </data>
  <data name="LabelGenerated" xml:space="preserve">
    <value>Money generated</value>
  </data>
  <data name="LabelGoal" xml:space="preserve">
    <value>Goal</value>
  </data>
  <data name="LabelToSaveAnnually" xml:space="preserve">
    <value>Money to save annually</value>
  </data>
  <data name="MissingValueOnInputFields" xml:space="preserve">
    <value>Missing value on required input fields</value>
  </data>
  <data name="NumberOfStages" xml:space="preserve">
    <value>Number of stages</value>
  </data>
  <data name="RequestError" xml:space="preserve">
    <value>There is an error with your request</value>
  </data>
  <data name="RoI" xml:space="preserve">
    <value>Interest Rate (%)</value>
  </data>
  <data name="SavePerMonth" xml:space="preserve">
    <value>Save Per Month</value>
  </data>
  <data name="Spending" xml:space="preserve">
    <value>Expected Spending (VND)</value>
  </data>
  <data name="Stage" xml:space="preserve">
    <value>Stage</value>
  </data>
  <data name="TitleAnnualIncrease" xml:space="preserve">
    <value>Expected annual increase in your monthly savings in this stage</value>
  </data>
  <data name="TitleBankInput" xml:space="preserve">
    <value>Current amount of money in your bank </value>
  </data>
  <data name="TitleCurrentAge" xml:space="preserve">
    <value>Your current age</value>
  </data>
  <data name="TitleFFPAge" xml:space="preserve">
    <value>The age at which you plan to stop working or generating income</value>
  </data>
  <data name="TitleFromAge" xml:space="preserve">
    <value>Your starting age in this stage</value>
  </data>
  <data name="TitleInflation" xml:space="preserve">
    <value>Inflation rate in your country</value>
  </data>
  <data name="TitleInput" xml:space="preserve">
    <value>What-If Scenario</value>
  </data>
  <data name="TitleNumberOfStages" xml:space="preserve">
    <value>Different stages of your life (Up to a maximum of 3)</value>
  </data>
  <data name="TitleRoI" xml:space="preserve">
    <value>The interest rate on your bank savings</value>
  </data>
  <data name="TitleSavePerMonth" xml:space="preserve">
    <value>This is the amount of money you plan to spend each month during retirement. If you leave this field blank, the app will automatically calculate the amount based on your entered data and financial goals. If you are working with multiple stages, please ensure that at least one stage is left blank for accurate calculations.</value>
  </data>
  <data name="TitleSpending" xml:space="preserve">
    <value>Expected monthly expenditure after retirement</value>
  </data>
  <data name="TitleToAge" xml:space="preserve">
    <value>Your ending age in this stage</value>
  </data>
  <data name="ToAge" xml:space="preserve">
    <value>To Age</value>
  </data>
  <data name="ToAgeEqualToFFPAge" xml:space="preserve">
    <value>To Age must be equal to FFP Age</value>
  </data>
  <data name="ToAgeHigherThanFromAge" xml:space="preserve">
    <value>To Age must be higher than From Age</value>
  </data>
  <data name="ToAgeLowerOrEqualToFFPAge" xml:space="preserve">
    <value>To Age must be lower or equal to FFP Age</value>
  </data>
  <data name="ValidStageNumber" xml:space="preserve">
    <value>Number of stages from 1-3</value>
  </data>
</root>