@using Microsoft.AspNetCore.Mvc.Localization;

@inject IViewLocalizer Localizer;

@{
	ViewData["Title"] = "What-if Scenario";
}
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Outfit">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/autonumeric@4.8.1"></script>

<div class="what-if">
	<div class="input-container">
		<p>What-If Scenario</p>
		<label title="@Localizer["TitleCurrentAge"]" for="current-age-input" class="whatif-labels">@Localizer["CurrentAge"]</label>
		<input type="number" placeholder="Ex: 18" id="current-age-input" required/>

		<label title="@Localizer["TitleFFPAge"]" for="ffp-age-input" class="whatif-labels">@Localizer["FFPAge"]</label>
		<input type="number" placeholder="Ex: 65" id="ffp-age-input" required/>

		<label title="@Localizer["TitleSpending"]" for="spend-input" class="whatif-labels">@Localizer["Spending"]</label>
		<input type="text" placeholder="Ex: 30,000,000" id="spend-input" required />

		<label title="@Localizer["TitleInflation"]" for="inflation-input" class="whatif-labels">@Localizer["Inflation"]</label>
		<input type="number" placeholder="Ex: 3.7" id="inflation-input" value="4.3" required />

		<label title="@Localizer["TitleBankInput"]" for="bank-input" class="whatif-labels">@Localizer["BankInput"]</label>
		<input type="text" placeholder="Ex: 100,000,000" id="bank-input" required />
		
		<label title="@Localizer["TitleRoI"]" for="roi-input" class="whatif-labels">@Localizer["RoI"]</label>
		<input type="text" id="roi-input" placeholder="Ex: 4.7" required />

		<label title="@Localizer["TitleNumberOfStages"]" for="stage-number-input" class="whatif-labels">@Localizer["NumberOfStages"]</label>
		<div class="stage-number-input-wrapper">
			<input type="number" step="1" placeholder="Ex: 3" id="stage-number-input" required />
			<button onclick="bulkAddToList()" id="btn-list-stages">Expand</button>
		</div>
		<div class="stages-list">
			<ul id="myList">

			</ul>
			<a disabled="disabled" onclick="removeFromList()" id="remove">-</a>
			<a disabled="disabled" onclick="addToList()" id="add">+</a>
		</div>
		<div class="stages-input" id="1">

			<label title="@Localizer["TitleFromAge"]" id="lbl-current-age-input-1" for="current-age-input-1" class="whatif-labels">@Localizer["FromAge"]</label>
			<input type="number" placeholder="Ex: 18"  id="current-age-input-1" required disabled/>

			<label title="@Localizer["TitleToAge"]" id="lbl-ffp-age-input-1" for="ffp-age-input-1" class="whatif-labels">@Localizer["ToAge"]</label>
			<input type="number" placeholder="Ex: 39" id="ffp-age-input-1" required/>

			<label title="@Localizer["TitleAnnualIncrease"]" id="lbl-increase-input-1" for="increase-input-1" class="whatif-labels">@Localizer["AnnualIncrease"] (%)</label>
			<input type="number" placeholder="Ex: 10" id="increase-input-1" required/>

			<label title="@Localizer["TitleSavePerMonth"]" id="lbl-save-monthly-1" for="save-monthly-1" class="whatif-labels">@Localizer["SavePerMonth"] (VND)</label>
			<input type="text" placeholder="Ex: 7,000,000" id="save-monthly-1" />

		</div>

		<div class="stages-input" id="2">

			<label title="@Localizer["TitleFromAge"]" for="current-age-input-2" class="whatif-labels">@Localizer["FromAge"]</label>
			<input type="number" placeholder="Ex: 40" id="current-age-input-2" required disabled/>

			<label title="@Localizer["TitleToAge"]" for="ffp-age-input-2" class="whatif-labels">@Localizer["ToAge"]</label>
			<input type="number" placeholder="Ex: 54" id="ffp-age-input-2" required/>

			<label title="@Localizer["TitleAnnualIncrease"]" for="increase-input-2" class="whatif-labels">@Localizer["AnnualIncrease"] (%)</label>
			<input type="number" placeholder="Ex: 10" id="increase-input-2" required/>

			<label title="@Localizer["TitleSavePerMonth"]" for="save-monthly-2" class="whatif-labels">@Localizer["SavePerMonth"] (VND)</label>
			<input type="text" placeholder="Ex: 7,000,000" id="save-monthly-2" />
			

		</div>

		<div class="stages-input" id="3">

			<label title="@Localizer["TitleFromAge"]" for="current-age-input-3" class="whatif-labels">@Localizer["FromAge"]</label>
			<input type="number" placeholder="Ex: 55" id="current-age-input-3" required disabled/>

			<label title="@Localizer["TitleToAge"]" for="ffp-age-input-3" class="whatif-labels">@Localizer["ToAge"]</label>
			<input type="number" placeholder="Ex: 65" id="ffp-age-input-3" required/>

			<label title="@Localizer["TitleAnnualIncrease"]" for="increase-input-3" class="whatif-labels">@Localizer["AnnualIncrease"] (%)</label>
			<input type="number" placeholder="Ex: 10" id="increase-input-3" required/>

			<label title="@Localizer["TitleSavePerMonth"]" for="save-monthly-3" class="whatif-labels">@Localizer["SavePerMonth"] (VND)</label>
			<input type="text" placeholder="Ex: 7,000,000" id="save-monthly-3" />


		</div>

		<div class="whatif-buttons">
			<button style="display: none" onclick="calculate()" id="calculate">Calculate</button>
			<button style="display: none" onclick="save()" id="save">Save</button>
		</div>

		<br />
		<p id="error-line" style="color: red"></p>

	</div>
	<div class="answer-container">
	<div class="chart-container">
		<canvas id="myChart" style="margin-top:50px;"></canvas>
	</div>
	<div class="answer">
		<p id="answer"></p>
		<input id="money-to-save" style="display: none">
		<input id="at-stage" style="display: none">
	</div>
	</div>
</div>
<style>
	
	html {
		height: 100%;
	}

	body {
		background-color: #03030F;
	}
	
	p {
		font-family: "Outfit";
		font-weight: bold;
		margin-left: auto;
		margin-right: auto;
	}

	.what-if {
		display: flex;
		flex-direction: row;
		width: 100%;
		height: 100%;
		column-gap: 5vw;
		padding-top: 5vh;
	}

	.whatif-labels:hover {
		cursor: pointer
	}

	.input-container {
		background-color: white;
		display: flex;
		flex-direction: column;
		align-items: start;
		width: 25vw;
		height: 105vh;
		margin-left: 5vw;
		border-radius: 30px;
	}

	.stages-list{
		font-family: "Outfit";
		display: flex;
		width:100%;
		align-items:center;		
	}

	.stage-number-input-wrapper {
		display: flex;
		flex-direction: row;
		gap: 25px;
		margin-left: 9px;
	}

	#btn-list-stages {
		background-color: black;
		color: white;
		margin-left: auto;
		margin-right: auto;
		border-radius: 30px;
		padding: 5px 20px 5px 20px;
		margin-bottom: 8px;
	}

	#btn-list-stages:hover {
		cursor:pointer;
	}

	ul {
		padding:0;
	
	}
	li {
		font-weight:bold;
	}

	a[disabled="disabled"] {
		display: none;
	}
	
	input:disabled {
		cursor: not-allowed;
		background-color: lightgray;
	}

	#remove {
		font-family: "Outfit";
		color: black;
		font-size: 22px;
		font-weight: 350;
		margin-left: 10px;
		height: 32px;
	}

	#remove:hover {
		cursor: pointer;
	}

	#add {
		font-family: "Outfit";
		color: black;
		font-size: 22px;
		font-weight: 350;
		margin-left: 5px;
	}
	#add:hover{
		cursor:pointer;
	}

	.stages-input {
		width: 100%;
		display: none;
	
	}

	.stages-input:target {
		display: flex;
		flex-direction: column;
	}
	.chart-container {
		display:flex;
		/* align-items:center; */
		/* justify-content:center; */
		background-color: white;
		width: 60vw;
		height: 75vh;
		border-radius: 30px;

	}
	
	label {
		margin-bottom: 0px;
		font-family: "Outfit";
		font-weight: thin;
		margin-left: 10%;
	}

	.whatif-buttons {
		margin-top: 10px;
		margin-left: auto;
		margin-right: auto;
		display: inline-flex;
		gap: 30px;
	}
	#calculate {
		background-color:black;
		color:white;
		margin-left: auto;
		margin-right: auto;
		border-radius: 30px;
		padding: 5px 20px 5px 20px;
	}
	#calculate:hover{
		cursor: pointer;
	}

	#save {
		background-color: black;
		color: white;
		margin-left: auto;
		margin-right: auto;
		border-radius: 30px;
		padding: 5px 20px 5px 20px;
	}

	#save:hover {
		cursor: pointer;
	}
	input {
		border: none;
		border-bottom: 1px solid black;
		margin-bottom: 10px;
		font-family: "Outfit";
		/* font-weight: thinner; */
		margin-left: 10%;
		width:70%;
	}

	input[type=number]::-webkit-inner-spin-button, 
	input[type=number]::-webkit-outer-spin-button { 
	  -webkit-appearance: none; 
	  margin: 0; 
	}

	.ans{
		font-family:"Outfit";
	}
	.answer{
		background-color: white;
		border-radius: 30px;
		margin-top:20px;
		height:15vh;
		display:flex;
		flex-direction:column;
		justify-content:center;
		align-items:center;
	}

	#answer {
		 padding: 10px 20px;
		border-radius: 5px;
	}

	footer {
		display: none;
	}
</style>
<script>

	//garage
	function addToList() {
		let i = document.getElementById("myList").getElementsByTagName("li").length;
		if (!validateInputOnAddStage(i)) return;
		document.getElementById("error-line").innerText = "";

		autoCompleteFields(i);

		const myList = document.getElementById("myList");
		const newListItem = document.createElement("li");
		const linkElement = document.createElement("a");
		
		const firstElement = document.getElementById("stage1");
		const firstCurrentAgeInput = document.getElementById("lbl-current-age-input-1");
		const firstFFPAgeInput = document.getElementById("lbl-ffp-age-input-1");
		const firstIncreaseInput = document.getElementById("lbl-increase-input-1");
		const firstSaveInput = document.getElementById("lbl-save-monthly-1");
		firstElement.innerText = "Stage 1"; 
		firstCurrentAgeInput.innerText = "From 1";
		firstFFPAgeInput.innerText = "To 1";
		firstIncreaseInput.innerText = "Annual Increase Saving 1 (%)";
		firstSaveInput.innerText = "Save per month 1 (USD)";

		linkElement.innerText = "Stage " + (i + 1);
		linkElement.href = "#" + (i + 1);
		linkElement.style.color = "black";

		newListItem.appendChild(linkElement);
		newListItem.setAttribute("id", "stage" + (i+1));
		myList.appendChild(newListItem);

		const removeBtn = document.getElementById("remove");
		removeBtn.removeAttribute("disabled");
		const addBtn = document.getElementById("add");
		//force display on stage
		addBtn.setAttribute("href", "#" + (i+1));

		if (i+1 === 3) {
			addBtn.setAttribute("disabled", "disabled");
		}
	}

	//garage
	function validateInputOnAddStage(i) {
		if (!validateTopMostInput()) return false;
		if (parseInt(document.getElementById("ffp-age-input-" + i).value) >= parseInt(document.getElementById("ffp-age-input").value)) {
			document.getElementById("error-line").innerText = `To ${i} must be lower than FFP age`;
			return false;
		}

		for (let j = 1; j <= i; j++) {
			if (document.getElementById("current-age-input-" + j).value.length === 0 || document.getElementById("ffp-age-input-" + j).value.length === 0 || document.getElementById("increase-input-" + j).value.length === 0) {
				document.getElementById("error-line").innerText = `Missing value on required input fields (Stage ${j})`;
				return false;
			}
			if (parseInt(document.getElementById("current-age-input-" + j).value) >= parseInt(document.getElementById("ffp-age-input-" + j).value)) {
				document.getElementById("error-line").innerText = `To ${j} must be higher than From ${j}`;
				return false;
			}
			if (parseInt(document.getElementById("ffp-age-input-" + j).value) > parseInt(document.getElementById("ffp-age-input").value)) {
				document.getElementById("error-line").innerText = `To ${j} must be lower or equal to FFP Age`;
				return false;
			}
		}
		return true;
	}

	//garage
	function autoCompleteFields(i) {
		document.getElementById("current-age-input-" + (i+1)).value = parseInt(document.getElementById("ffp-age-input-" + i).value) + 1;
		document.getElementById("ffp-age-input-" + (i + 1)).value = parseInt(document.getElementById("ffp-age-input").value);
	}

	//garage
	function removeFromList() {
		let i = document.getElementById("myList").getElementsByTagName("li").length;
		const item = document.getElementById("stage" + i);
		item.parentNode.removeChild(item);

		//invalidate all inputs from removed stage
		document.getElementById("current-age-input-" + i).value = "";
		document.getElementById("ffp-age-input-" + i).value = "";
		document.getElementById("increase-input-" + i).value = "";
		document.getElementById("save-monthly-" + i).value = "";

		//default ffp age of latest stage to ffp age
		document.getElementById("ffp-age-input-" + (i - 1)).value = parseInt(document.getElementById("ffp-age-input").value);
		const removeBtn = document.getElementById("remove");
		const addBtn = document.getElementById("add");
		if (addBtn.hasAttribute("disabled")) { 
			addBtn.removeAttribute("disabled");
		}

		//force display on stage
		removeBtn.setAttribute("href", "#" + (i-1));
		addBtn.setAttribute("href", "#" + (i-1));		
		
		if (i-1 === 1) {
			const firstElement = document.getElementById("stage1");
			const firstCurrentAgeInput = document.getElementById("lbl-current-age-input-1");
			const firstFFPAgeInput = document.getElementById("lbl-ffp-age-input-1");
			const firstIncreaseInput = document.getElementById("lbl-increase-input-1");
			const firstSaveInput = document.getElementById("lbl-save-monthly-1");
			firstElement.innerText = "Stage";
			firstCurrentAgeInput.innerText = "From";
			firstFFPAgeInput.innerText = "To";
			firstIncreaseInput.innerText = "Annual Increase Saving (%)";
			firstSaveInput.innerText = "Save per month (USD)";
			
			removeBtn.setAttribute("disabled", "disabled");
		} 
	}

	




	function checkUrlForLang() {
		const currentUrl = window.location.href; 
		let lang = "";

		if (currentUrl.includes("?culture=en-US")) {
			lang = "en-US";
		} 
		else if (currentUrl.includes("?culture=de-DE")) {
			lang = "de-DE";
		}
		else if (sessionStorage.getItem("lang") && sessionStorage.getItem("lang").length > 0) {
			lang = sessionStorage.getItem("lang");
		}
		else {
			lang = "en-US";
		}

		sessionStorage.setItem('lang', lang);
	}

	// Event listener for popstate (back/forward navigation)
	window.addEventListener('popstate', function (event) {
		checkUrlForLang();
	});

	// Check URL on page load
	window.onload = function () {
		checkUrlForLang();
		const lang = sessionStorage.getItem("lang");
		const currentUrl = window.location.href;
		if (!currentUrl.includes(`?culture=${lang}`)) { 
			window.location.href = `?culture=${lang}`;
		}
	};

	//autonumeric
	new AutoNumeric('#spend-input', {
		digitGroupSeparator: ',',
		decimalCharacter: '.',
		decimalPlaces: 0
	});
	new AutoNumeric('#bank-input', {
		digitGroupSeparator: ',',
		decimalCharacter: '.',
		decimalPlaces: 0
	});
	new AutoNumeric('#save-monthly-1', {
		digitGroupSeparator: ',',
		decimalCharacter: '.',
		decimalPlaces: 0
	});
	new AutoNumeric('#save-monthly-2', {
		digitGroupSeparator: ',',
		decimalCharacter: '.',
		decimalPlaces: 0
	});
	new AutoNumeric('#save-monthly-3', {
		digitGroupSeparator: ',',
		decimalCharacter: '.',
		decimalPlaces: 0
	});

	//input events
	document.getElementById("current-age-input").addEventListener("input", (e) => {
		document.getElementById("current-age-input-1").value = e.target.value;
	})

	document.getElementById("ffp-age-input").addEventListener("input", (e) => {
		let i = document.getElementById("myList").getElementsByTagName("li").length;
		if (i > 0) { 
			document.getElementById("ffp-age-input-" + i).value = e.target.value;
		}
	})

	document.getElementById("ffp-age-input-1").addEventListener("input", (e) => {
		document.getElementById("current-age-input-2").value = parseInt(e.target.value) + 1;
	})

	document.getElementById("ffp-age-input-2").addEventListener("input", (e) => {
		document.getElementById("current-age-input-3").value = parseInt(e.target.value) + 1;
	})

	document.getElementById("stage-number-input").addEventListener("input", (e) => {
		e.target.value = Math.round(e.target.value);
	})

	document.getElementById("btn-list-stages").addEventListener("click", (e) => {
		bulkAddToList();
	})

	//stage events
	document.body.addEventListener('click', function (e) {
		if (e.target.id === 'a-stage-1') {
			document.getElementById(1).classList.add("active");
			document.getElementById(2).classList.remove("active");
			document.getElementById(3).classList.remove("active");
			e.target.style.color = "gray";
			if (document.getElementById('a-stage-2') && document.getElementById('a-stage-2').style.color === "gray") {
				document.getElementById('a-stage-2').style.color = "black";
			}
			else if (document.getElementById('a-stage-3') && document.getElementById('a-stage-3').style.color === "gray") {
				document.getElementById('a-stage-3').style.color = "black";
			}
		}
		else if (e.target.id === 'a-stage-2') {
			document.getElementById(2).classList.add("active");
			document.getElementById(1).classList.remove("active");
			document.getElementById(3).classList.remove("active");
			e.target.style.color = "gray";
			if (document.getElementById('a-stage-1') && document.getElementById('a-stage-1').style.color === "gray") {
				document.getElementById('a-stage-1').style.color = "black";
			}
			else if (document.getElementById('a-stage-3') && document.getElementById('a-stage-3').style.color === "gray") {
				document.getElementById('a-stage-3').style.color = "black";
			}
		}
		else if (e.target.id === 'a-stage-3') {
			document.getElementById(3).classList.add("active");
			document.getElementById(2).classList.remove("active");
			document.getElementById(1).classList.remove("active");
			e.target.style.color = "gray";
			if (document.getElementById('a-stage-2') && document.getElementById('a-stage-2').style.color === "gray") {
				document.getElementById('a-stage-2').style.color = "black";
			}
			else if (document.getElementById('a-stage-1') && document.getElementById('a-stage-1').style.color === "gray") {
				document.getElementById('a-stage-1').style.color = "black";
			}
		}
	});

	function validateTopMostInput() {
		if (document.getElementById("current-age-input").value.length === 0
			|| document.getElementById("ffp-age-input").value.length === 0
			|| document.getElementById("spend-input").value.length === 0
			|| document.getElementById("inflation-input").value.length === 0
			|| document.getElementById("bank-input").value.length === 0
			|| document.getElementById("roi-input").value.length === 0
			|| document.getElementById("stage-number-input").value.length === 0
		) {
			document.getElementById("error-line").innerText = "@Localizer["MissingValueOnTopInputFields"]";
			return false;
		}
		return true;
	}

	function bulkAddToList() {
		if (!validateTopMostInput()) return false;
		document.getElementById("error-line").innerText = "";

		let stageNumber = parseInt(document.getElementById("stage-number-input").value);
		if (stageNumber < 1 || stageNumber > 3) {
			document.getElementById("error-line").innerText = "@Localizer["ValidStageNumber"]";
			return;
		}
		document.getElementById("error-line").innerText = "";

		const myList = document.getElementById("myList");
		//clear list
		myList.innerHTML = "";
		//reset all stages
		resetAllStages();

		for (let i = 0; i < stageNumber; i++) {
			const newListItem = document.createElement("li");
			const linkElement = document.createElement("a");
			linkElement.setAttribute("id", "a-stage-" + (i + 1));
			linkElement.innerText = "Stage " + (i + 1);
			linkElement.href = "#" + (i + 1);
			linkElement.style.color = "black";

			newListItem.appendChild(linkElement);
			newListItem.setAttribute("id", "li-stage-" + (i + 1));
			myList.appendChild(newListItem);

			//appear
			document.getElementById(i + 1).style.display = "";
		}
		
		hideDeletedStages(stageNumber);
		addClickEffectsToActiveStage(stageNumber);
		autoCompleteBulk(stageNumber);

		document.getElementById("calculate").style.display = "block";
		document.getElementById("save").style.display = "block";
	}

	function resetAllStages() {
		for (let i = 1; i <= 3; i++) {
			document.getElementById("current-age-input-" + i).value = "";
			document.getElementById("ffp-age-input-" + i).value = "";
			document.getElementById("increase-input-" + i).value = "";
			document.getElementById("save-monthly-" + i).value = "";
		}

	}

	function hideDeletedStages(stageNumber) {
		for (let i = stageNumber + 1; i <= 3; i++) {
			document.getElementById(i).style.display = "none";
		}
	}

	function addClickEffectsToActiveStage(stageNumber) {
		for (let i = 1; i <= stageNumber; i++) {
			if (document.getElementById(i).classList.contains("active")) {
				document.getElementById("a-stage-" + i).style.color = "gray";
			}
		}
	}

	function autoCompleteBulk(stageNumber) {
		document.getElementById("current-age-input-1").value = parseInt(document.getElementById("current-age-input").value);
		document.getElementById("ffp-age-input-" + stageNumber).value = parseInt(document.getElementById("ffp-age-input").value);
	}


	function validateOnCalculate() {
		if (!validateTopMostInput()) return false;

		let i = document.getElementById("myList").getElementsByTagName("li").length;
		if (parseInt(document.getElementById("ffp-age-input-" + i).value) < parseInt(document.getElementById("ffp-age-input").value)) {
			document.getElementById("error-line").innerText = "@Localizer["ToAgeEqualToFFPAge"]" + ` (Stage ${i})`;
			return false;
		}

		for (let j = 1; j <= i; j++) {
			if (document.getElementById("current-age-input-" + j).value.length === 0
				|| document.getElementById("ffp-age-input-" + j).value.length === 0
				|| document.getElementById("increase-input-" + j).value.length === 0
			) {
				document.getElementById("error-line").innerText = "@Localizer["MissingValueOnInputFields"]" + ` (Stage ${j})`;
				return false;
			}
			if (parseInt(document.getElementById("current-age-input-" + j).value) >= parseInt(document.getElementById("ffp-age-input-" + j).value)) {
				document.getElementById("error-line").innerText = "@Localizer["ToAgeHigherThanFromAge"]" + ` (Stage ${j})`;
				return false;
			}
			if (parseInt(document.getElementById("ffp-age-input-" + j).value) > parseInt(document.getElementById("ffp-age-input").value)) {
				document.getElementById("error-line").innerText = "@Localizer["ToAgeLowerOrEqualToFFPAge"]" + ` (Stage ${j})`;
				return false;
			}
		}
		return true;
	}

	function calculate() {
		if (!validateOnCalculate()) return;
		document.getElementById("error-line").innerText = "";

		// What-if input
		const ageLife = parseInt(document.getElementById("current-age-input").value);
		const ffpLife = parseInt(document.getElementById("ffp-age-input").value);
		const moneyFFP = parseInt(document.getElementById("spend-input").value.replaceAll(",", "")); // Monthly money required after financial freedom point
		const inflation = parseFloat(document.getElementById("inflation-input").value) / 100; // Inflation of the country
		const bankAsset = parseInt(document.getElementById("bank-input").value.replaceAll(",", "")); // Total money in the bank NOW
		const bankROI = parseFloat(document.getElementById("roi-input").value) / 100; // Bank return_of_investment (e.g., 6%)

		const currentAge = parseInt(document.getElementById("current-age-input-1").value);
		const ffpAge = parseInt(document.getElementById("ffp-age-input-1").value); // Financial freedom point age
		const annualIncrease = parseFloat(document.getElementById("increase-input-1").value) / 100;
		const saveMonthly = parseInt(document.getElementById("save-monthly-1").value.replaceAll(",", ""));

		const currentAge2 = parseInt(document.getElementById("current-age-input-2").value);
		const ffpAge2 = parseInt(document.getElementById("ffp-age-input-2").value); // Financial freedom point age
		const annualIncrease2 = parseFloat(document.getElementById("increase-input-2").value) / 100;
		const saveMonthly2 = parseInt(document.getElementById("save-monthly-2").value.replaceAll(",", ""));

		const currentAge3 = parseInt(document.getElementById("current-age-input-3").value);
		const ffpAge3 = parseInt(document.getElementById("ffp-age-input-3").value); // Financial freedom point age
		const annualIncrease3 = parseFloat(document.getElementById("increase-input-3").value) / 100;
		const saveMonthly3 = parseInt(document.getElementById("save-monthly-3").value.replaceAll(",", ""));

		//xvalue for chart
		var life = [];
		var last = ffpLife - ageLife;
		for (var i = 0; i <= last; i++) {
			life[i] = currentAge + i;
		}		

		// Event
		const eventAge = 30;
		const eventIncome = 0;

		// Pension expected
		const pension = 0;

		function generateStages(stageInfo) {
			const stages = [];

			for (let i = 0; i < stageInfo.length; i++) {
				const { start, end, toSavePerMonth, annualIncrease } = stageInfo[i];

				const stage = {
					stageNumber: i + 1,
					moneyEarnAnnual: [],
					moneyEarnAnnualWithBankROI: [],
					totalSave: null,
					toSavePerMonth,
					start,
					end,
					annualIncrease,
				};

				stages.push(stage);
			}

			return stages;
		}

		// Generate stages
		const stageInfo = [
			{ start: currentAge, end: ffpAge, toSavePerMonth: saveMonthly, annualIncrease: annualIncrease },
			{ start: currentAge2, end: ffpAge2, toSavePerMonth: saveMonthly2, annualIncrease: annualIncrease2 },
			{ start: currentAge3, end: ffpAge3, toSavePerMonth: saveMonthly3, annualIncrease: annualIncrease3 },

		];
		
		const stages = generateStages(stageInfo);

		// Calculation Total Money needed
		const moneyNeed = (moneyFFP - pension) * 12 * 25 * Math.pow(1 + inflation, ffpLife - ageLife); // Money required after FFP
		const moneyEvent = eventIncome * Math.pow(1 + bankROI, ffpLife - eventAge);
		const BankAsset = bankAsset * Math.pow(1 + bankROI, ffpLife - eventAge);
		const totalMoneyNeed = moneyNeed - moneyEvent - BankAsset;
	
		// Function to calculate sigma of a given function
		function sigma(start, end, func) {
			let sum = 0;
			for (let i = start; i < end; i++) {
				sum += func(i);
			}
			return sum;
		}

		// Function to find the reverse of sigma using Newton-Raphson method
		function findReverseSigma(targetSum, func, initialGuess, tolerance) {
			let x = initialGuess;
			let previousX;

			do {
				previousX = x;
				x = x - (func(x) - targetSum) / calculateDerivative(func, x);
			} while (Math.abs(x - previousX) > tolerance);

			return x;
		}

		// Function to calculate the derivative of a given function using a small step value
		function calculateDerivative(func, x) {
			const step = 0.0001; // Small step value
			return (func(x + step) - func(x)) / step;
		}

		// Calculate money that the user can save each year
		function calculateAnnualSaving(stageNumber, start, end, monthlySaving, annualIncrease) {
			if (stageNumber != 1) {
				monthlySaving = monthlySaving * Math.pow((1 + inflation), (start - currentAge));
			}

			const annualSaving = [];
			for (let i = 0; i <= end - start; i++) {
				const amount = (monthlySaving * 12) * Math.pow(1 + annualIncrease, i);
				const age = start + i;
				annualSaving.push({ age, amount });
			}

			return annualSaving;
		}
		
		// Calculate money that the user can save each year then put it into the bank
		function calculateAnnualSavingWithBankROI(start, end, annualSaving, bankROI) {
			const annualSavingWithBankROI = [];

			for (let i = 0; i <= end - start; i++) {
				const age = annualSaving[i].age;
				const amount = annualSaving[i].amount * Math.pow(1 + bankROI, ffpLife - age);
				annualSavingWithBankROI.push({ age, amount });
			}

			return annualSavingWithBankROI;
		}

		// Calculate Total_moneyEarnAnnualWithBankROI using the provided functions
		function calculateTotalAnnualSavingWithBankROI(stages, monthlySavingRequired, bankROI) {
			const totalAnnualSaving = [];
			stages.forEach((stage) => {

				stage.moneyEarnAnnual = calculateAnnualSaving(stage.stageNumber, stage.start, stage.end, stage.toSavePerMonth ? stage.toSavePerMonth : monthlySavingRequired, stage.annualIncrease);

				stage.moneyEarnAnnualWithBankROI = calculateAnnualSavingWithBankROI(stage.start, stage.end, stage.moneyEarnAnnual, bankROI);

				stage.moneyEarnAnnualWithBankROI.forEach((x) => {
					totalAnnualSaving.push(x);
				});
			});
			return sigma(0, totalAnnualSaving.length, (i) => totalAnnualSaving[i].amount);
		}

		// Example usage: Find the money_save needed to achieve the target Total_money_need
		const initialGuess = 1000; // Replace with an initial guess close to the solution
		const tolerance = 0.01; // Tolerance for stopping the iteration

		const moneyToSavePerMonth = findReverseSigma(totalMoneyNeed, (x) => calculateTotalAnnualSavingWithBankROI(stages, x, bankROI), initialGuess, tolerance);
		document.getElementById("money-to-save").value = Math.ceil(moneyToSavePerMonth);
		
		// Generate new stages info
		function StageInfoUpdate(stages, moneyToSavePerMonth) {
			const filledStages = stages.map((stage, index) => {
				stage.toSavePerMonth = stage.toSavePerMonth || moneyToSavePerMonth;

				return stage;
			});
			return filledStages;
		}
		const NewStages = StageInfoUpdate(stages, moneyToSavePerMonth);

		// An Array annualSaving per year from the begin to the end:
		function generateCombinedMonthlySavings(stages) {
			const combinedSavings = [];

			stages.forEach((stage) => {
				const { toSavePerMonth, start, end, annualIncrease } = stage;

				let monthlySaving = toSavePerMonth * 12;
				if (stage.stageNumber !== 1) {
					// Adjust monthly saving based on inflation for subsequent stages
					monthlySaving *= Math.pow(1 + inflation, start - currentAge);
				}

				for (let age = start; age <= end; age++) {
					combinedSavings.push({ age, monthlySaving });
					// Increase monthly saving based on the annual increase for each age
					monthlySaving *= (1 + annualIncrease);
				}
			});

			return combinedSavings;
		}

		// Usage with the provided stages (Yellow Line = ArrayAnnualSaving)
		const ArrayAnnualSaving = generateCombinedMonthlySavings(stages);
		

		var moneyAnnual = [];
		for (var i = 0; i < ArrayAnnualSaving.length; i++) {
			moneyAnnual.push(ArrayAnnualSaving[i].monthlySaving);
		}

		// An Array of Bank account amount from the begin to the end:
		function calculateTotalSavingsAtEachAge(ArrayAnnualSaving) {
			const totalSavingsAtEachAge = [];

			let accumulator = 0;

			for (const savings of ArrayAnnualSaving) {
				if (accumulator == 0) {
					accumulator = (accumulator + savings.monthlySaving);
				} else {
					accumulator = accumulator * (1 + bankROI) + savings.monthlySaving;
				}
				totalSavingsAtEachAge.push({ age: savings.age, total: accumulator });
			}

			return totalSavingsAtEachAge;
		}


		// Usage with the previously generated ArrayAnnualSaving array (Red line = totalSavingsAtEachAge)
		const totalSavingsAtEachAge = calculateTotalSavingsAtEachAge(ArrayAnnualSaving);
		
		var moneyCreated = [];
		for (var i = 0; i < totalSavingsAtEachAge.length; i++) {
			moneyCreated.push(totalSavingsAtEachAge[i].total)
		}
		// Total Money (Green Line = totalMoneyNeed)
		
		var goal = [];
		for (var i = ageLife; i <= ffpLife; i++) {
			goal.push(totalMoneyNeed);
		}


		let saveEnough = false;
		if (moneyToSavePerMonth.toString().includes("Infinity") && moneyToSavePerMonth.toString().slice(0,1) === "-") {
			document.getElementById("answer").innerText= "@Localizer["AnswerMinusInfinity"]";
			saveEnough = true;
		}
		else if (moneyToSavePerMonth.toString().includes("Infinity")) {
			document.getElementById("answer").innerText= "@Localizer["AnswerInfinity"]";
			saveEnough = false;
		}
		else {
			document.getElementById("answer").innerText= "@Localizer["AnswerFirstPart"] " + document.getElementById("spend-input").value + " VND"  + " @Localizer["AnswerSecondPart"] " + Math.ceil(moneyToSavePerMonth) + " VND";
			let i = document.getElementById("myList").getElementsByTagName("li").length;
			for (let j = 1; j <= i; j++) {
				if (document.getElementById("save-monthly-" + j).value.length === 0) {
					document.getElementById("at-stage").value = j;
					document.getElementById("answer").innerText+= " @Localizer["AnswerLastPart"]" + ` ${j}`;
					break;
				}
			}
			saveEnough = true;
		}

		//destroy current chart
		var currentChart = Chart.getChart("myChart");
		if (currentChart !== undefined) {
			currentChart.destroy();
		}
	
		const xValues = life;
		var newChart = new Chart("myChart", {
			type: "line",
			data: {
				labels: xValues,
				datasets: [{
					label: 'Money to save annual',
					data: moneyAnnual,
					borderColor: "yellow",
					fill: false
				}, {
					label: 'Goal',
					data: goal,
					borderColor: "green",
					fill: false
				}
					, {
					label: 'Money generated',
					data: moneyCreated,
					borderColor: "red",
					fill: false
				}]
			},
			options: {
				legend: {},
					title: {
					display: true,
					text: "Life Chart"
				}
			}
		});
	}

	function save() {
		const currentAge = parseInt(document.getElementById("current-age-input-1").value);
		const ffpAge = parseInt(document.getElementById("ffp-age-input-1").value); // Financial freedom point age
		const moneyFFP = parseInt(document.getElementById("spend-input").value); // Monthly money required after financial freedom point
		const inflation = parseFloat(document.getElementById("inflation-input").value) / 100; // Inflation of the country
		const annualIncrease = parseFloat(document.getElementById("increase-input-1").value) / 100;
		const saveMonthly = parseFloat(document.getElementById("save-monthly-1").value);

		const currentAge2 = parseInt(document.getElementById("current-age-input-2").value);
		const ffpAge2 = parseInt(document.getElementById("ffp-age-input-2").value); // Financial freedom point age
		const annualIncrease2 = parseFloat(document.getElementById("increase-input-2").value) / 100;
		const saveMonthly2 = parseFloat(document.getElementById("save-monthly-2").value);

		const currentAge3 = parseInt(document.getElementById("current-age-input-3").value);
		const ffpAge3 = parseInt(document.getElementById("ffp-age-input-3").value); // Financial freedom point age
		const annualIncrease3 = parseFloat(document.getElementById("increase-input-3").value) / 100;
		const saveMonthly3 = parseFloat(document.getElementById("save-monthly-3").value);

		//xvalue for chart
		const ageLife = parseInt(document.getElementById("current-age-input").value);
		const ffpLife = parseInt(document.getElementById("ffp-age-input").value);

		// Capital Asset
		const bankAsset = parseFloat(document.getElementById("bank-input").value); // Total money in the bank NOW
		const bankROI = parseFloat(document.getElementById("roi-input").value) / 100;

		const saveAtFirstMonth = parseFloat(document.getElementById("money-to-save").value);
		const saveAtStage = parseInt(document.getElementById("at-stage").value);

		$.ajax({
			url: '@Url.Action("SaveWhatIf", "Home")',
			type: 'POST',
			dataType: 'json',
			data: { 
				currentAge: ageLife, ffpAge: ffpLife, monthlySpending: moneyFFP, inflation: inflation, bankAsset: bankAsset, bankROI: bankROI,
				startStage1: currentAge, endStage1: ffpAge, annualIncreaseStage1: annualIncrease, saveMonthlyStage1: saveMonthly, 
				startStage2: currentAge2, endStage2: ffpAge2, annualIncreaseStage2: annualIncrease2, saveMonthlyStage2: saveMonthly2,
				startStage3: currentAge3, endStage3: ffpAge3, annualIncreaseStage3: annualIncrease3, saveMonthlyStage3: saveMonthly3,
				saveFirstMonth: saveAtFirstMonth, saveAtStage: saveAtStage
			},
			success: async function (data) {
				// Handle the API response
				console.log("API Response:", data);
				alert("Saved successfully");
			},
			error: function (error) {
				document.getElementById("error-line").innerText = "@Localizer["RequestError"]";
				console.error("API Request Failed:", error);
			}
		});
	}

</script>