@{
	ViewData["Title"] = "What-if Scenario";
}
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Outfit">
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>

<div class="what-if">
	<div class="input-container">
		<p>What-If Scenario</p>
		<label for="current-age-input">Current Age</label>
		<input type="number" id="current-age-input" />

		<label for="ffp-age-input">FFP Age</label>
		<input type="number" id="ffp-age-input" />



		<label for="spend-input">Spending</label>
		<input type="text" id="spend-input" />

		<label for="inflation-input">Inflation</label>
		<input type="number" id="inflation-input" />

		<label for="bank-input">Bank Assets</label>
		<input type="text" id="bank-input" />
		<input type="text" id="roi-input" placeholder="ROI" />

		<label for="increase-input">Annual Increase Saving</label>
		<input type="number" id="increase-input" />
		<button onclick="calculate()">Calculate</button>
		

	</div>
	<div class="chart-container">
		<canvas id="myChart" style="margin-top:50px;"></canvas>
	</div>
</div>
<style>
	html {
		height: 100%;
	}

	body {
		background-color: #03030F;
	}

	p {
		font-family: "Outfit";
		font-weight: bold;
		margin-left: auto;
		margin-right: auto;
	}

	.what-if {
		display: flex;
		flex-direction: row;
		width: 100%;
		height: 100%;
		column-gap: 5vw;
		padding-top: 5vh;
	}

	.input-container {
		background-color: white;
		display: flex;
		flex-direction: column;
		align-items: start;
		width: 25vw;
		height: 75vh;
		margin-left: 5vw;
		border-radius: 30px;
	}

	.chart-container {
		background-color: white;
		width: 60vw;
		height: 75vh;
		border-radius: 30px;
	}



	label {
		margin-bottom: 0px;
		font-family: "Outfit";
		font-weight: thin;
		margin-left: 10%;
	}

	input {
		border: none;
		border-bottom: 1px solid black;
		margin-bottom: 10px;
		font-family: "Outfit";
		font-weight: thiner;
		margin-left: 10%;
	}

	footer {
		display: none;
	}
</style>
<script>

	function calculate() {
		// What-if input
		const currentAge = parseInt(document.getElementById("current-age-input").value);
		const ffpAge = parseInt(document.getElementById("ffp-age-input").value); // Financial freedom point age
		const moneyFFP = parseInt(document.getElementById("spend-input").value); // Monthly money required after financial freedom point
		const inflation = parseInt(document.getElementById("inflation-input").value)/100; // Inflation of the country
		const annualIncrease = parseInt(document.getElementById("increase-input").value)/100;

		//xvalue for chart
		var life = [];
		var last = ffpAge - currentAge;
		for (var i = 0; i <= last; i++) {
			life[i] = currentAge + i;
		}
		console.log(last);
		// Capital Asset
		const bankAsset = parseInt(document.getElementById("bank-input").value); // Total money in the bank NOW
		const bankROI = parseInt(document.getElementById("roi-input").value )/ 100; // Bank return_of_investment (e.g., 6%)

		// Event
		const eventAge = 30;
		const eventIncome = 0;

		// Pension expected
		const pension = 0;

		function generateStages(stageInfo) {
			const stages = [];

			for (let i = 0; i < stageInfo.length; i++) {
				const { start, end, toSavePerMonth, annualIncrease } = stageInfo[i];

				const stage = {
					stageNumber: i + 1,
					moneyEarnAnnual: [],
					moneyEarnAnnualWithBankROI: [],
					totalSave: null,
					toSavePerMonth,
					start,
					end,
					annualIncrease,
				};

				stages.push(stage);
			}

			return stages;
		}

		// Generate stages
		const stageInfo = [
			{ start: currentAge, end: ffpAge, toSavePerMonth: null, annualIncrease:annualIncrease},
			
		];

		const stages = generateStages(stageInfo);
		console.log(stages);

		// Calculation Total Money needed
		const moneyNeed = (moneyFFP - pension) * 12 * 25 * Math.pow(1 + inflation, ffpAge - currentAge); // Money required after FFP
		const moneyEvent = eventIncome * Math.pow(1 + bankROI, ffpAge - eventAge);
		const BankAsset = bankAsset * Math.pow(1 + bankROI, ffpAge - eventAge);
		const totalMoneyNeed = moneyNeed - moneyEvent - BankAsset;

		// Function to calculate sigma of a given function
		function sigma(start, end, func) {
			let sum = 0;
			for (let i = start; i < end; i++) {
				sum += func(i);
			}
			return sum;
		}

		// Function to find the reverse of sigma using Newton-Raphson method
		function findReverseSigma(targetSum, func, initialGuess, tolerance) {
			let x = initialGuess;
			let previousX;

			do {
				previousX = x;
				x = x - (func(x) - targetSum) / calculateDerivative(func, x);
			} while (Math.abs(x - previousX) > tolerance);

			return x;
		}

		// Function to calculate the derivative of a given function using a small step value
		function calculateDerivative(func, x) {
			const step = 0.0001; // Small step value
			return (func(x + step) - func(x)) / step;
		}

		// Calculate money that the user can save each year
		function calculateAnnualSaving(stageNumber, start, end, monthlySaving, annualIncrease) {
			if (stageNumber != 1) {
				monthlySaving = monthlySaving * Math.pow((1 + inflation), (start - currentAge));
			}

			const annualSaving = [];
			for (let i = 0; i <= end - start; i++) {
				const amount = (monthlySaving * 12) * Math.pow(1 + annualIncrease, start - (start - i));
				const age = start + i;
				annualSaving.push({ age, amount });
			}

			return annualSaving;
		}

		// Calculate money that the user can save each year then put it into the bank
		function calculateAnnualSavingWithBankROI(start, end, annualSaving, bankROI) {
			const annualSavingWithBankROI = [];

			console.log(start, end);
			for (let i = 0; i <= end - start; i++) {
				const age = annualSaving[i].age;
				const amount = annualSaving[i].amount * Math.pow(1 + bankROI, ffpAge - age);
				annualSavingWithBankROI.push({ age, amount });
			}

			return annualSavingWithBankROI;
		}

		// Calculate Total_moneyEarnAnnualWithBankROI using the provided functions
		function calculateTotalAnnualSavingWithBankROI(stages, monthlySavingRequired, bankROI) {
			const totalAnnualSaving = [];
			stages.forEach((stage) => {
				stage.moneyEarnAnnual = calculateAnnualSaving(stage.stageNumber, stage.start, stage.end, stage.toSavePerMonth ? stage.toSavePerMonth : monthlySavingRequired, stage.annualIncrease);
				stage.moneyEarnAnnualWithBankROI = calculateAnnualSavingWithBankROI(stage.start, stage.end, stage.moneyEarnAnnual, bankROI);
				stage.moneyEarnAnnualWithBankROI.forEach((x) => {
					totalAnnualSaving.push(x);
				});
			});
			return sigma(0, totalAnnualSaving.length, (i) => totalAnnualSaving[i].amount);
		}

		// Example usage: Find the money_save needed to achieve the target Total_money_need
		const initialGuess = 1000; // Replace with an initial guess close to the solution
		const tolerance = 0.01; // Tolerance for stopping the iteration

		const moneyToSavePerMonth = findReverseSigma(totalMoneyNeed, (x) => calculateTotalAnnualSavingWithBankROI(stages, x, bankROI), initialGuess, tolerance);

		console.log("Money needed to save:", (moneyToSavePerMonth));
		console.log(inflation);
		console.log(bankROI);
		
		function computeMoneyLeftToSave(stages) {
			let computedSum = 0;
			stages.forEach((stage) => {
				if (stage.toSavePerMonth) {
					stage.moneyEarnAnnual = calculateMoneyEarnAnnual(stage.start, stage.end, stage.toSavePerMonth, stage.annualIncrease);
					stage.totalSave = sigma(0, stage.end - stage.start, (i) => stage.moneyEarnAnnual[i].amount);
					computedSum += stage.totalSave;
				}
			});
			return computedSum;
		}

		console.log(stages);
		// Generate new stages info
		function StageInfoUpdate(stages, moneyToSavePerMonth) {
			const filledStages = stages.map((stage, index) => {
				if (index === 0) {
					// For the first stage, set toSavePerMonth to moneyToSavePerMonth if it's null
					stage.toSavePerMonth = stage.toSavePerMonth || moneyToSavePerMonth;
				} else {
					// For subsequent stages, set toSavePerMonth to the value from the previous stage
					stage.toSavePerMonth =
						stage.toSavePerMonth || stages[index - 1].toSavePerMonth;
				}
				return stage;
			});
			return filledStages;
		}
		const NewStages = StageInfoUpdate(stages, moneyToSavePerMonth);

		// An Array annualSaving per year from the begin to the end:
		function generateCombinedMonthlySavings(stages) {
			const combinedSavings = [];

			stages.forEach((stage) => {
				const { toSavePerMonth, start, end, annualIncrease } = stage;

				let monthlySaving = toSavePerMonth * 12;
				if (stage.stageNumber !== 1) {
					// Adjust monthly saving based on inflation for subsequent stages
					monthlySaving *= Math.pow(1 + inflation, start - currentAge);
				}

				for (let age = start; age <= end; age++) {
					combinedSavings.push({ age, monthlySaving });
					// Increase monthly saving based on the annual increase for each age
					monthlySaving *= (1 + annualIncrease);
				}
			});

			return combinedSavings;
		}

		// Usage with the provided stages (Yellow Line = ArrayAnnualSaving)
		const ArrayAnnualSaving = generateCombinedMonthlySavings(stages);
		console.log(ArrayAnnualSaving);
		var moneyAnnual = [];
		for (var i = 0; i < ArrayAnnualSaving.length;i++){
			moneyAnnual.push(ArrayAnnualSaving[i].monthlySaving);
		}

		// An Array of Bank account amount from the begin to the end:
		function calculateTotalSavingsAtEachAge(ArrayAnnualSaving) {
			const totalSavingsAtEachAge = [];

			let accumulator = 0;

			for (const savings of ArrayAnnualSaving) {
				if (accumulator == 0) {
					accumulator = (accumulator + savings.monthlySaving);
				} else {
					accumulator = accumulator * (1 + bankROI) + savings.monthlySaving;
				}
				totalSavingsAtEachAge.push({ age: savings.age, total: accumulator });
			}

			return totalSavingsAtEachAge;
		}


		// Usage with the previously generated ArrayAnnualSaving array (Red line = totalSavingsAtEachAge)
		const totalSavingsAtEachAge = calculateTotalSavingsAtEachAge(ArrayAnnualSaving);
		console.log(totalSavingsAtEachAge);
		var moneyCreated = [];
		for (var i = 0; i < totalSavingsAtEachAge.length; i++){
			moneyCreated.push(totalSavingsAtEachAge[i].total)
		}
		// Total Money (Green Line = totalMoneyNeed)
		console.log(totalMoneyNeed);
		var goal = [];
		for (var i = currentAge; i <= ffpAge; i++) {
			goal.push(totalMoneyNeed);
		}

		console.log(life);
		const xValues = life;

		new Chart("myChart", {
			type: "line",
			data: {
				labels: xValues,
				datasets: [{
					data: moneyAnnual,
					borderColor: "yellow",
					fill: false
				}, {
					data: goal,
					borderColor: "green",
					fill: false
				}
				, {
					data: moneyCreated,
					borderColor: "red",
					fill: false
				}]
			},
			options: {
				legend: { display: false }
			}
		});
	}

		
</script>