@{
	ViewData["Title"] = "Dashboard";
	DateTime today = DateTime.Today;
	int thisMonth = today.Month;
	int thisYear = today.Year;

	DateTime dateOflastMonth = today.AddMonths(-1);
	int lastMonth = dateOflastMonth.Month;
	int lastYear = dateOflastMonth.Year; //can be this year
}


@model LifeChart.Models.DashboardModel
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Outfit">
<div class="dashboard">
	<div class="balance">
		<p style="color:white;">Balance</p>
		<label asp-for="Balance" style="color:white;">@Model.Balance USD</label>
		<p style="color:white; margin-left:30px;font-size:larger;margin-top:50px;">**** **** **** ****</p>

	</div>

	<div class="income">
		<p class="income">Income</p>
		@if (Model.Income.Count > 0 && Model.Income.Keys.Last() == thisMonth + "/" + thisYear && Model.Income.Values.Last() != null)
		{
			decimal? investmentAmount = 0;
			@foreach (var investment in Model.Investments)
			{
				investmentAmount += investment.Amount * (1 + investment.RoI);
			}
			decimal? incomeThisMonth = Model.Income.Values.Last() + investmentAmount;
			<label>@incomeThisMonth USD</label>
			if (Model.Income.Count > 1 && Model.Income.Keys.Reverse().Skip(1).FirstOrDefault() == lastMonth + "/" + lastYear && Model.Income.Values.Reverse().Skip(1).FirstOrDefault() != null)
			{
				decimal? incomeLastMonth = Model.Income.Values.Reverse().Skip(1).FirstOrDefault() + investmentAmount;
				//Console.WriteLine(incomeThisMonth);
				//Console.WriteLine(incomeLastMonth);
				decimal growth = Math.Round(((incomeThisMonth - incomeLastMonth) * 100 / incomeLastMonth).GetValueOrDefault(), 2);
				string growthString = (growth >= 0) ? "+" + @growth : "" + @growth;
				<br />
				<br />
				<br />
				<div class="inout-container">
					<label class="inout">Income this month </label>

					<p class="growth">@growthString%</p>
				</div>
			}
		}
		else
		{
			<label></label>
		}
	</div>

	<div class="expenses">
		<p class="expenses">Expenses</p>
		@if (Model.Expenses.Count > 0 && Model.Expenses.Keys.Last() == thisMonth + "/" + thisYear && Model.Expenses.Values.Last() != null)
		{
			decimal? expensesThisMonth = Model.Expenses.Values.Last();
			<label>@expensesThisMonth USD</label>
			if (Model.Expenses.Count > 1 && Model.Expenses.Keys.Reverse().Skip(1).FirstOrDefault() == lastMonth + "/" + lastYear && Model.Expenses.Values.Reverse().Skip(1).FirstOrDefault() != null)
			{
				decimal? expensesLastMonth = Model.Expenses.Values.Reverse().Skip(1).FirstOrDefault();
				decimal growth = Math.Round(((expensesThisMonth - expensesLastMonth) * 100 / expensesLastMonth).GetValueOrDefault(), 2);
				string growthString = (@growth >= 0) ? "+" + @growth : "" + @growth;
				<br />
				<br />
				<br />
				<div class="inout-container">
					<label class="inout">Expenses this month </label>

					<p class="growth">@growthString% </p>
				</div>
			}
		}
		else
		{
			<label></label>
		}
	</div>
	<div class="monthly-chart">
		<canvas id="monthlyChart" style="max-height:270px;max-width:90%;margin-left:10px;"></canvas>
	</div>
	<div class="expense-chart">
		<canvas id="expenseChart" style="max-height:250px;max-width:90%;"></canvas>
	</div>
</div>
</div>

<style>

	html {
		height: 100%;
	}

	body {
		background: #03030F;
	}

	p {
		font-family: "Outfit";
		margin-left: 30px;
	}

	.inout-container {
	}

	.inout {
		font-size: medium;
	}

	.growth {
		margin-top: 0px;
	}

	label {
		font-family: "Outfit";
		margin-left: 30px;
	}

	.dashboard {
		display: grid;
		justify-content: center;
		margin-top: 30px;
		grid-template-columns: 25% 20% 20%;
		column-gap: 50px;
		row-gap: 30px;
	}

	.balance {
		background: white;
		height: 160px;
		border-radius: 10px;
		background: linear-gradient(to right, grey, black);
		box-shadow: 10px 10px #42424B;
	}

	.income {
		background: white;
		border-radius: 10px;
	}

	.expenses {
		background: white;
		border-radius: 10px;
	}

	.monthly-chart {
		background: white;
		grid-column-start: 1;
		grid-column-end: 3;
		height: 280px;
		border-radius: 10px;
	}

	.expense-chart {
		display: flex;
		background: white;
		height: 280px;
		width: 100%;
		border-radius: 10px;
		justify-content: center;
	}

	#myChart {
	}

	footer {
		display: none;
	}
</style>
<script>
	@*Month Chart*@
			var income = [];
	var incomeValue = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Income.Values));
	for (var i = 0; i < @Model.Income.Count; i++) {
		income.push(incomeValue[i]);
	}
	var expense = [];
	var expenseValue = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Expenses.Values));
	for (var i = 0; i < @Model.Expenses.Count; i++) {
		expense.push(expenseValue[i]);
	}
	var month = [];
	var monthValue = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Income.Keys));
	for (var i = 0; i < @Model.Income.Count; i++) {
		month.push(monthValue[i]);
	}
	const xValues = month;
	new Chart("monthlyChart", {
		type: "line",
		data: {
			labels: xValues,
			datasets: [{
				label: 'Expense',
				data: expense,
				borderColor: "red",
				fill: false
			}, {
				label: 'Income',
				data: income,
				borderColor: "green",
				fill: false
			}]
		},
		options: {
			legend: {}
		}
	});

	var category = [];
	var categoryValue = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ExpenseList.Keys));
	for (var i = 0; i < @Model.ExpenseList.Count; i++) {
		category.push(categoryValue[i]);
	}

	var amount = [];
	var amountValue = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ExpenseList.Values));
	for (var i = 0; i < @Model.ExpenseList.Count; i++) {
		amount.push(amountValue[i]);
	}

	var Expenses = category;
	var Amount = amount;
	var barColors = [
		"#b91d47",
		"#00aba9",
		"#2b5797",
		"#e8c3b9",
		"#1e7145",
		"#FFFF00"
	];

	new Chart("expenseChart", {
		type: "pie",
		data: {
			labels: Expenses,
			datasets: [{
				backgroundColor: barColors,
				data: Amount
			}]
		},
		options: {
			title: {
				display: true,
				text: "All Expenses"
			},
			responsive: true,
			maintainAspectRatio: false,
			legend: {
				labels: {
					fontSize: 10 // Adjust the font size as needed
				}
			}
		}
	});
</script>