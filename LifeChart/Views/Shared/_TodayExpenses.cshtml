@{
}

@model LifeChart.Models.MoneyLoverModel;


<div class="container-inside-today"> 
    <h1>Today Expenses</h1> 
    <form id="today-expense-form" asp-controller="Home" asp-action="AddExpense" data-ajax="true" data-ajax-mode="replace" data-ajax-update="#TodayExpensesContainer" data-ajax-method="POST"> 
        <select id="expense-name" name="categoryId" required > 
            <option value=1>Groceries</option>
            <option value=2>Entertainment</option>
            <option value=3>Utilities</option>
            <option value=4>Rent</option>
            <option value=5>Mortgages</option>
            <option value=6>Others</option>
        </select>
        <input type="number" id="expense-amount" placeholder="Amount" name="amount" required /> 
        <button type="submit"><img src="~/assets/plus.png" width="15px"/> </button> 
    </form> 
    <div class="expense-table-today"> 
        <div class="table-today">
        <table> 
            @*<thead> 
                <tr> 
                    <th>Expense Name</th> 
                    <th>Amount</th> 
                    <th>Action</th> 
                </tr> 
            </thead> 
            *@
            <tbody id="expense-list">
                @if (Model != null) {
                    @foreach (var item in Model.TodayExpenses)
	                {
                        <tr>
		                    <td class="itemKey">@item.Key</td>
		                    <td>@Math.Floor(item.Value)</td>
                        </tr>
	                }
                }
            </tbody> 
        </table> 
        </div>
        @*<div class="total-amount"> 
            <strong>Total:</strong>  
            $<span id="total-amount">0</span> 
        </div> *@
    </div> 
</div> 



@*<script>
    // script.js 
    // Get form, expense list, and total amount elements 
    const expenseForm = document.getElementById("expense-form"); 
    const expenseList = document.getElementById("expense-list"); 
    const totalAmountElement = document.getElementById("total-amount"); 
      
    // Initialize expenses array from localStorage 
    let expenses =  JSON.parse(localStorage.getItem("expenses")) || []; 
      
    // Function to render expenses in tabular form 
    function renderExpenses() { 
      
        
        // Clear expense list 
        expenseList.innerHTML = ""; 
        
        // Initialize total amount 
        let totalAmount = 0; 
      
        // Loop through expenses array and create table rows 
        for (let i = 0; i < expenses.length; i++) { 
            const expense = expenses[i]; 
            const expenseRow = document.createElement("tr"); 
            expenseRow.innerHTML = ` 
                <td>${expense.name}</td> 
                <td>$${expense.amount}</td> 
                <td class="delete-btn" data-id="${i}">Delete</td>
            `; 
            expenseList.appendChild(expenseRow); 
      
            // Update total amount 
            totalAmount += expense.amount; 
        } 
      
        // Update total amount display 
        totalAmountElement.textContent = totalAmount.toFixed(2); 
      
        // Save expenses to localStorage 
        localStorage.setItem("expenses", JSON.stringify(expenses)); 
    } 
      
    // Function to add expense 
    function addExpense(event) { 
        event.preventDefault(); 
      
        // Get expense name and amount from form 
        const expenseNameInput = document.getElementById("expense-name"); 
        const expenseAmountInput = document.getElementById("expense-amount"); 
        const expenseName = expenseNameInput.value; 
        const expenseAmount = parseFloat(expenseAmountInput.value); 
      
        // Clear form inputs 
        expenseNameInput.value = ""; 
        expenseAmountInput.value = ""; 
      
        // Validate inputs 
        if (expenseName === "" || isNaN(expenseAmount)) { 
            alert("Please enter valid expense details."); 
            return; 
        } 
      
        // Create new expense object 
        const expense = { 
            name: expenseName, 
            amount: expenseAmount, 
        }; 
      
        // Add expense to expenses array 
        expenses.push(expense); 
      
        // Render expenses 
        renderExpenses(); 
    } 
      
    // Function to delete expense 
    function deleteExpense(event) { 
        if (event.target.classList.contains("delete-btn")) { 
      
            // Get expense index from data-id attribute 
            const expenseIndex = 
                parseInt(event.target.getAttribute("data-id")); 
      
            // Remove expense from expenses array 
            expenses.splice(expenseIndex, 1); 
      
            // Render expenses 
            renderExpenses(); 
        } 
    } 
      
    // Add event listeners 
    expenseForm.addEventListener("submit", addExpense); 
    expenseList.addEventListener("click", deleteExpense); 
      
    // Render initial expenses on page load 
    renderExpenses();
</script>*@





<style>
     @* Middle table *@
    .container-inside-today {
        width:400px;
        height:400px;
        margin: 0 auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    form {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;

    }

    input[type="text"],
    input[type="number"] {
        padding: 5px;
        border:none;
        border-bottom:1px solid black;

        outline: none;
    }

        input[type="text"]::placeholder,
        input[type="number"]::placeholder {
            color: #999;
        }
    select{
        border-radius:10px;
        margin-right:30px;
        width:150px;
        text-align-last: center;
    }
    button {
    
        background-color:white;
        border: none;

        cursor: pointer;
    }

        button:hover {
          
        }

    .expense-table-today {
        border: none;
        overflow: hidden;
        height:70%

       
    }
    .table-today{
        
        height:65%;
    }
    table {
        width: 100%;
        
        border-collapse: collapse;
        
    }

    thead th {
        background-color: white;
        padding: 10px;
        text-align: left;
    }

    tbody td {
        padding: 10px;
       
    }

    .delete-btn {
        color: red;
        cursor: pointer;
    }

    .total-amount {
        padding: 10px;
        text-align: right;
        background-color: #f2f2f2;
    }
</style>

